{"ast":null,"code":"var _jsxFileName = \"/home/albert/Desktop/albert.com/the-complete-react/react-form/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Validate = styled.p`\n  /* color: red; */\n`;\n_c = Validate;\n\nconst SimpleInput = props => {\n  _s();\n\n  // const nameInputRef = useRef();\n  const [enteredName, setEnteredName] = useState(\"\"); // const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  const enteredNameIsValid = enteredName.trim().length;\n\n  const nameInputChangeHandler = e => {\n    setEnteredName(e.target.value);\n\n    if (enteredName.trim().length > 4) {\n      setEnteredNameIsValid(false);\n    }\n\n    console.log(enteredName);\n  };\n\n  const nameInputBlurHandler = () => {\n    setEnteredNameTouched(true);\n\n    if (enteredName.trim().length < 6) {\n      setEnteredNameIsValid(true);\n    }\n  };\n\n  const formSubmissionHandler = e => {\n    e.preventDefault();\n    setEnteredNameTouched(true);\n\n    if (enteredName.trim().length < 6) {\n      setEnteredNameIsValid(true);\n      return;\n    }\n\n    console.log(enteredName);\n    setEnteredNameIsValid(true);\n    setEnteredName(\"\"); // const enteredValue = nameInputRef.current.value;\n    // nameInputRef.current.value = \"\"  NOT IDEAL, DON'T MANIPULATE THE DOM.\n    // console.log(\"USE REF::\", enteredValue);\n  };\n\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  const nameInputClasses = nameInputIsInvalid ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), enteredNameIsValid && /*#__PURE__*/_jsxDEV(Validate, {\n        className: \"error-text\",\n        children: \"This is required\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 33\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: enteredName.length < 6 ? \"validates\" : \"not-validates\",\n        type: \"text\",\n        value: enteredName // ref={nameInputRef}\n        ,\n        onBlur: nameInputBlurHandler,\n        onChange: nameInputChangeHandler,\n        id: \"name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: enteredName.length < 6 ? \"valids\" : \"invalids\",\n        type: \"submit\",\n        children: enteredName ? \"Submit\" : \"Type\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"LgiCUeBZKlto+n6NHgnrvDwlEEY=\");\n\n_c2 = SimpleInput;\nexport default SimpleInput; // FORMAL METHOD\n// import { useState } from \"react\";\n// import styled from \"styled-components\";\n// const Validate = styled.p`\n//   /* color: red; */\n// `\n// const SimpleInput = (props) => {\n//   // const nameInputRef = useRef();\n//   const [enteredName, setEnteredName] = useState(\"\");\n//   const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n//   const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n//   const nameInputChangeHandler = (e) => {\n//       setEnteredName(e.target.value);\n//       if (enteredName.trim().length > 4) {\n//         setEnteredNameIsValid(false)\n//       }\n//     console.log(enteredName);\n//   };\n//   const nameInputBlurHandler = () => {\n//     setEnteredNameTouched(true)\n//     if (enteredName.trim().length < 6) {\n//       setEnteredNameIsValid(true)\n//     }\n//   }\n//   const formSubmissionHandler = (e) => {\n//     e.preventDefault();\n//     setEnteredNameTouched(true)\n//     if (enteredName.trim().length < 6) {\n//       setEnteredNameIsValid(true)\n//       return\n//     }\n//     console.log(enteredName);\n//     setEnteredNameIsValid(true)\n//     setEnteredName(\"\");\n//     // const enteredValue = nameInputRef.current.value;\n//     // nameInputRef.current.value = \"\"  NOT IDEAL, DON'T MANIPULATE THE DOM.\n//     // console.log(\"USE REF::\", enteredValue);\n//   };\n//   const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched \n//   const nameInputClasses = nameInputIsInvalid ? \"form-control invalid\" : \"form-control\"\n//   return (\n//     <form onSubmit={formSubmissionHandler}>\n//       <div className={nameInputClasses}>\n//         <label htmlFor=\"name\">Your Name</label>\n//         { enteredNameIsValid && <Validate className=\"error-text\">This is required</Validate>}\n//         <input\n//           className={enteredName.length < 6 ? \"validates\" : \"not-validates\"}\n//           type=\"text\"\n//           value={enteredName}\n//           // ref={nameInputRef}\n//           onBlur={nameInputBlurHandler}\n//           onChange={nameInputChangeHandler}\n//           id=\"name\"\n//         />\n//       </div>\n//       <div className=\"form-actions\">\n//         <button\n//           className={enteredName.length < 6 ? \"valids\" : \"invalids\"}\n//           type=\"submit\"\n//         >\n//           {enteredName ? \"Submit\" : \"Type\"}\n//         </button>\n//       </div>\n//     </form>\n//   );\n// };\n// export default SimpleInput;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Validate\");\n$RefreshReg$(_c2, \"SimpleInput\");","map":{"version":3,"names":["useState","styled","Validate","p","SimpleInput","props","enteredName","setEnteredName","enteredNameTouched","setEnteredNameTouched","enteredNameIsValid","trim","length","nameInputChangeHandler","e","target","value","setEnteredNameIsValid","console","log","nameInputBlurHandler","formSubmissionHandler","preventDefault","nameInputIsInvalid","nameInputClasses"],"sources":["/home/albert/Desktop/albert.com/the-complete-react/react-form/src/components/SimpleInput.js"],"sourcesContent":["import { useState } from \"react\";\nimport styled from \"styled-components\";\n\n\nconst Validate = styled.p`\n  /* color: red; */\n`\n\nconst SimpleInput = (props) => {\n  // const nameInputRef = useRef();\n  const [enteredName, setEnteredName] = useState(\"\");\n  // const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n\n\n  const enteredNameIsValid = enteredName.trim().length\n  const nameInputChangeHandler = (e) => {\n      setEnteredName(e.target.value);\n      if (enteredName.trim().length > 4) {\n        setEnteredNameIsValid(false)\n      }\n    console.log(enteredName);\n  };\n\n\n\n  const nameInputBlurHandler = () => {\n    setEnteredNameTouched(true)\n    if (enteredName.trim().length < 6) {\n      setEnteredNameIsValid(true)\n    }\n  }\n\n\n\n  const formSubmissionHandler = (e) => {\n    e.preventDefault();\n\n    setEnteredNameTouched(true)\n    if (enteredName.trim().length < 6) {\n      setEnteredNameIsValid(true)\n      return\n    }\n    console.log(enteredName);\n    setEnteredNameIsValid(true)\n    setEnteredName(\"\");\n\n    // const enteredValue = nameInputRef.current.value;\n    // nameInputRef.current.value = \"\"  NOT IDEAL, DON'T MANIPULATE THE DOM.\n    // console.log(\"USE REF::\", enteredValue);\n  };\n\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched \n\n  const nameInputClasses = nameInputIsInvalid ? \"form-control invalid\" : \"form-control\"\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        { enteredNameIsValid && <Validate className=\"error-text\">This is required</Validate>}\n        <input\n          className={enteredName.length < 6 ? \"validates\" : \"not-validates\"}\n          type=\"text\"\n          value={enteredName}\n          // ref={nameInputRef}\n          onBlur={nameInputBlurHandler}\n          onChange={nameInputChangeHandler}\n          id=\"name\"\n        />\n      </div>\n      <div className=\"form-actions\">\n        <button\n          className={enteredName.length < 6 ? \"valids\" : \"invalids\"}\n          type=\"submit\"\n        >\n          {enteredName ? \"Submit\" : \"Type\"}\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// FORMAL METHOD\n\n// import { useState } from \"react\";\n// import styled from \"styled-components\";\n\n\n// const Validate = styled.p`\n//   /* color: red; */\n// `\n\n// const SimpleInput = (props) => {\n//   // const nameInputRef = useRef();\n//   const [enteredName, setEnteredName] = useState(\"\");\n//   const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n//   const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n\n//   const nameInputChangeHandler = (e) => {\n//       setEnteredName(e.target.value);\n//       if (enteredName.trim().length > 4) {\n//         setEnteredNameIsValid(false)\n//       }\n//     console.log(enteredName);\n//   };\n\n\n\n//   const nameInputBlurHandler = () => {\n//     setEnteredNameTouched(true)\n//     if (enteredName.trim().length < 6) {\n//       setEnteredNameIsValid(true)\n//     }\n//   }\n\n\n\n//   const formSubmissionHandler = (e) => {\n//     e.preventDefault();\n\n//     setEnteredNameTouched(true)\n//     if (enteredName.trim().length < 6) {\n//       setEnteredNameIsValid(true)\n//       return\n//     }\n//     console.log(enteredName);\n//     setEnteredNameIsValid(true)\n//     setEnteredName(\"\");\n\n//     // const enteredValue = nameInputRef.current.value;\n//     // nameInputRef.current.value = \"\"  NOT IDEAL, DON'T MANIPULATE THE DOM.\n//     // console.log(\"USE REF::\", enteredValue);\n//   };\n\n//   const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched \n\n//   const nameInputClasses = nameInputIsInvalid ? \"form-control invalid\" : \"form-control\"\n//   return (\n//     <form onSubmit={formSubmissionHandler}>\n//       <div className={nameInputClasses}>\n//         <label htmlFor=\"name\">Your Name</label>\n//         { enteredNameIsValid && <Validate className=\"error-text\">This is required</Validate>}\n//         <input\n//           className={enteredName.length < 6 ? \"validates\" : \"not-validates\"}\n//           type=\"text\"\n//           value={enteredName}\n//           // ref={nameInputRef}\n//           onBlur={nameInputBlurHandler}\n//           onChange={nameInputChangeHandler}\n//           id=\"name\"\n//         />\n//       </div>\n//       <div className=\"form-actions\">\n//         <button\n//           className={enteredName.length < 6 ? \"valids\" : \"invalids\"}\n//           type=\"submit\"\n//         >\n//           {enteredName ? \"Submit\" : \"Type\"}\n//         </button>\n//       </div>\n//     </form>\n//   );\n// };\n\n// export default SimpleInput;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}