{"ast":null,"code":"function _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport isValidNumber from '../isValid.js';\nimport parseDigits from '../helpers/parseDigits.js';\nimport matchPhoneNumberStringAgainstPhoneNumber from './matchPhoneNumberStringAgainstPhoneNumber.js';\nimport Metadata from '../metadata.js';\nimport getCountryByCallingCode from '../helpers/getCountryByCallingCode.js';\nimport { chooseFormatForNumber } from '../format.js';\nimport { startsWith, endsWith } from './util.js';\n/**\r\n * Leniency when finding potential phone numbers in text segments\r\n * The levels here are ordered in increasing strictness.\r\n */\n\nexport default {\n  /**\r\n   * Phone numbers accepted are \"possible\", but not necessarily \"valid\".\r\n   */\n  POSSIBLE: function POSSIBLE(phoneNumber, _ref) {\n    var candidate = _ref.candidate,\n        metadata = _ref.metadata;\n    return true;\n  },\n\n  /**\r\n   * Phone numbers accepted are \"possible\" and \"valid\".\r\n   * Numbers written in national format must have their national-prefix\r\n   * present if it is usually written for a number of this type.\r\n   */\n  VALID: function VALID(phoneNumber, _ref2) {\n    var candidate = _ref2.candidate,\n        defaultCountry = _ref2.defaultCountry,\n        metadata = _ref2.metadata;\n\n    if (!phoneNumber.isValid() || !containsOnlyValidXChars(phoneNumber, candidate, metadata)) {\n      return false;\n    } // Skipped for simplicity.\n    // return isNationalPrefixPresentIfRequired(phoneNumber, { defaultCountry, metadata })\n\n\n    return true;\n  },\n\n  /**\r\n   * Phone numbers accepted are \"valid\" and\r\n   * are grouped in a possible way for this locale. For example, a US number written as\r\n   * \"65 02 53 00 00\" and \"650253 0000\" are not accepted at this leniency level, whereas\r\n   * \"650 253 0000\", \"650 2530000\" or \"6502530000\" are.\r\n   * Numbers with more than one '/' symbol in the national significant number\r\n   * are also dropped at this level.\r\n   *\r\n   * Warning: This level might result in lower coverage especially for regions outside of\r\n   * country code \"+1\". If you are not sure about which level to use,\r\n   * email the discussion group libphonenumber-discuss@googlegroups.com.\r\n   */\n  STRICT_GROUPING: function STRICT_GROUPING(phoneNumber, _ref3) {\n    var candidate = _ref3.candidate,\n        defaultCountry = _ref3.defaultCountry,\n        metadata = _ref3.metadata,\n        regExpCache = _ref3.regExpCache;\n\n    if (!phoneNumber.isValid() || !containsOnlyValidXChars(phoneNumber, candidate, metadata) || containsMoreThanOneSlashInNationalNumber(phoneNumber, candidate) || !isNationalPrefixPresentIfRequired(phoneNumber, {\n      defaultCountry: defaultCountry,\n      metadata: metadata\n    })) {\n      return false;\n    }\n\n    return checkNumberGroupingIsValid(phoneNumber, candidate, metadata, allNumberGroupsRemainGrouped, regExpCache);\n  },\n\n  /**\r\n   * Phone numbers accepted are \"valid\" and are grouped in the same way\r\n   * that we would have formatted it, or as a single block.\r\n   * For example, a US number written as \"650 2530000\" is not accepted\r\n   * at this leniency level, whereas \"650 253 0000\" or \"6502530000\" are.\r\n   * Numbers with more than one '/' symbol are also dropped at this level.\r\n   *\r\n   * Warning: This level might result in lower coverage especially for regions outside of\r\n   * country code \"+1\". If you are not sure about which level to use, email the discussion group\r\n   * libphonenumber-discuss@googlegroups.com.\r\n   */\n  EXACT_GROUPING: function EXACT_GROUPING(phoneNumber, _ref4) {\n    var candidate = _ref4.candidate,\n        defaultCountry = _ref4.defaultCountry,\n        metadata = _ref4.metadata,\n        regExpCache = _ref4.regExpCache;\n\n    if (!phoneNumber.isValid() || !containsOnlyValidXChars(phoneNumber, candidate, metadata) || containsMoreThanOneSlashInNationalNumber(phoneNumber, candidate) || !isNationalPrefixPresentIfRequired(phoneNumber, {\n      defaultCountry: defaultCountry,\n      metadata: metadata\n    })) {\n      return false;\n    }\n\n    return checkNumberGroupingIsValid(phoneNumber, candidate, metadata, allNumberGroupsAreExactlyPresent, regExpCache);\n  }\n};\n\nfunction containsOnlyValidXChars(phoneNumber, candidate, metadata) {\n  // The characters 'x' and 'X' can be (1) a carrier code, in which case they always precede the\n  // national significant number or (2) an extension sign, in which case they always precede the\n  // extension number. We assume a carrier code is more than 1 digit, so the first case has to\n  // have more than 1 consecutive 'x' or 'X', whereas the second case can only have exactly 1 'x'\n  // or 'X'. We ignore the character if it appears as the last character of the string.\n  for (var index = 0; index < candidate.length - 1; index++) {\n    var charAtIndex = candidate.charAt(index);\n\n    if (charAtIndex === 'x' || charAtIndex === 'X') {\n      var charAtNextIndex = candidate.charAt(index + 1);\n\n      if (charAtNextIndex === 'x' || charAtNextIndex === 'X') {\n        // This is the carrier code case, in which the 'X's always precede the national\n        // significant number.\n        index++;\n\n        if (matchPhoneNumberStringAgainstPhoneNumber(candidate.substring(index), phoneNumber, metadata) !== 'NSN_MATCH') {\n          return false;\n        } // This is the extension sign case, in which the 'x' or 'X' should always precede the\n        // extension number.\n\n      } else {\n        var ext = parseDigits(candidate.substring(index));\n\n        if (ext) {\n          if (phoneNumber.ext !== ext) {\n            return false;\n          }\n        } else {\n          if (phoneNumber.ext) {\n            return false;\n          }\n        }\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction isNationalPrefixPresentIfRequired(phoneNumber, _ref5) {\n  var defaultCountry = _ref5.defaultCountry,\n      _metadata = _ref5.metadata; // First, check how we deduced the country code. If it was written in international format, then\n  // the national prefix is not required.\n\n  if (phoneNumber.__countryCallingCodeSource !== 'FROM_DEFAULT_COUNTRY') {\n    return true;\n  }\n\n  var metadata = new Metadata(_metadata);\n  metadata.selectNumberingPlan(phoneNumber.countryCallingCode);\n  var phoneNumberRegion = phoneNumber.country || getCountryByCallingCode(phoneNumber.countryCallingCode, {\n    nationalNumber: phoneNumber.nationalNumber,\n    defaultCountry: defaultCountry,\n    metadata: metadata\n  }); // Check if a national prefix should be present when formatting this number.\n\n  var nationalNumber = phoneNumber.nationalNumber;\n  var format = chooseFormatForNumber(metadata.numberingPlan.formats(), nationalNumber); // To do this, we check that a national prefix formatting rule was present\n  // and that it wasn't just the first-group symbol ($1) with punctuation.\n\n  if (format.nationalPrefixFormattingRule()) {\n    if (metadata.numberingPlan.nationalPrefixIsOptionalWhenFormattingInNationalFormat()) {\n      // The national-prefix is optional in these cases, so we don't need to check if it was present.\n      return true;\n    }\n\n    if (!format.usesNationalPrefix()) {\n      // National Prefix not needed for this number.\n      return true;\n    }\n\n    return Boolean(phoneNumber.nationalPrefix);\n  }\n\n  return true;\n}\n\nexport function containsMoreThanOneSlashInNationalNumber(phoneNumber, candidate) {\n  var firstSlashInBodyIndex = candidate.indexOf('/');\n\n  if (firstSlashInBodyIndex < 0) {\n    // No slashes, this is okay.\n    return false;\n  } // Now look for a second one.\n\n\n  var secondSlashInBodyIndex = candidate.indexOf('/', firstSlashInBodyIndex + 1);\n\n  if (secondSlashInBodyIndex < 0) {\n    // Only one slash, this is okay.\n    return false;\n  } // If the first slash is after the country calling code, this is permitted.\n\n\n  var candidateHasCountryCode = phoneNumber.__countryCallingCodeSource === 'FROM_NUMBER_WITH_PLUS_SIGN' || phoneNumber.__countryCallingCodeSource === 'FROM_NUMBER_WITHOUT_PLUS_SIGN';\n\n  if (candidateHasCountryCode && parseDigits(candidate.substring(0, firstSlashInBodyIndex)) === phoneNumber.countryCallingCode) {\n    // Any more slashes and this is illegal.\n    return candidate.slice(secondSlashInBodyIndex + 1).indexOf('/') >= 0;\n  }\n\n  return true;\n}\n\nfunction checkNumberGroupingIsValid(number, candidate, metadata, checkGroups, regExpCache) {\n  throw new Error('This part of code hasn\\'t been ported');\n  var normalizedCandidate = normalizeDigits(candidate, true\n  /* keep non-digits */\n  );\n  var formattedNumberGroups = getNationalNumberGroups(metadata, number, null);\n\n  if (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {\n    return true;\n  } // If this didn't pass, see if there are any alternate formats that match, and try them instead.\n\n\n  var alternateFormats = MetadataManager.getAlternateFormatsForCountry(number.getCountryCode());\n  var nationalSignificantNumber = util.getNationalSignificantNumber(number);\n\n  if (alternateFormats) {\n    for (var _iterator = _createForOfIteratorHelperLoose(alternateFormats.numberFormats()), _step; !(_step = _iterator()).done;) {\n      var alternateFormat = _step.value;\n\n      if (alternateFormat.leadingDigitsPatterns().length > 0) {\n        // There is only one leading digits pattern for alternate formats.\n        var leadingDigitsRegExp = regExpCache.getPatternForRegExp('^' + alternateFormat.leadingDigitsPatterns()[0]);\n\n        if (!leadingDigitsRegExp.test(nationalSignificantNumber)) {\n          // Leading digits don't match; try another one.\n          continue;\n        }\n      }\n\n      formattedNumberGroups = getNationalNumberGroups(metadata, number, alternateFormat);\n\n      if (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n/**\r\n * Helper method to get the national-number part of a number, formatted without any national\r\n * prefix, and return it as a set of digit blocks that would be formatted together following\r\n * standard formatting rules.\r\n */\n\n\nfunction getNationalNumberGroups(metadata, number, formattingPattern) {\n  throw new Error('This part of code hasn\\'t been ported');\n\n  if (formattingPattern) {\n    // We format the NSN only, and split that according to the separator.\n    var nationalSignificantNumber = util.getNationalSignificantNumber(number);\n    return util.formatNsnUsingPattern(nationalSignificantNumber, formattingPattern, 'RFC3966', metadata).split('-');\n  } // This will be in the format +CC-DG1-DG2-DGX;ext=EXT where DG1..DGX represents groups of digits.\n\n\n  var rfc3966Format = formatNumber(number, 'RFC3966', metadata); // We remove the extension part from the formatted string before splitting it into different\n  // groups.\n\n  var endIndex = rfc3966Format.indexOf(';');\n\n  if (endIndex < 0) {\n    endIndex = rfc3966Format.length;\n  } // The country-code will have a '-' following it.\n\n\n  var startIndex = rfc3966Format.indexOf('-') + 1;\n  return rfc3966Format.slice(startIndex, endIndex).split('-');\n}\n\nfunction allNumberGroupsAreExactlyPresent(metadata, number, normalizedCandidate, formattedNumberGroups) {\n  throw new Error('This part of code hasn\\'t been ported');\n  var candidateGroups = normalizedCandidate.split(NON_DIGITS_PATTERN); // Set this to the last group, skipping it if the number has an extension.\n\n  var candidateNumberGroupIndex = number.hasExtension() ? candidateGroups.length - 2 : candidateGroups.length - 1; // First we check if the national significant number is formatted as a block.\n  // We use contains and not equals, since the national significant number may be present with\n  // a prefix such as a national number prefix, or the country code itself.\n\n  if (candidateGroups.length == 1 || candidateGroups[candidateNumberGroupIndex].contains(util.getNationalSignificantNumber(number))) {\n    return true;\n  } // Starting from the end, go through in reverse, excluding the first group, and check the\n  // candidate and number groups are the same.\n\n\n  var formattedNumberGroupIndex = formattedNumberGroups.length - 1;\n\n  while (formattedNumberGroupIndex > 0 && candidateNumberGroupIndex >= 0) {\n    if (candidateGroups[candidateNumberGroupIndex] !== formattedNumberGroups[formattedNumberGroupIndex]) {\n      return false;\n    }\n\n    formattedNumberGroupIndex--;\n    candidateNumberGroupIndex--;\n  } // Now check the first group. There may be a national prefix at the start, so we only check\n  // that the candidate group ends with the formatted number group.\n\n\n  return candidateNumberGroupIndex >= 0 && endsWith(candidateGroups[candidateNumberGroupIndex], formattedNumberGroups[0]);\n}\n\nfunction allNumberGroupsRemainGrouped(metadata, number, normalizedCandidate, formattedNumberGroups) {\n  throw new Error('This part of code hasn\\'t been ported');\n  var fromIndex = 0;\n\n  if (number.getCountryCodeSource() !== CountryCodeSource.FROM_DEFAULT_COUNTRY) {\n    // First skip the country code if the normalized candidate contained it.\n    var countryCode = String(number.getCountryCode());\n    fromIndex = normalizedCandidate.indexOf(countryCode) + countryCode.length();\n  } // Check each group of consecutive digits are not broken into separate groupings in the\n  // {@code normalizedCandidate} string.\n\n\n  for (var i = 0; i < formattedNumberGroups.length; i++) {\n    // Fails if the substring of {@code normalizedCandidate} starting from {@code fromIndex}\n    // doesn't contain the consecutive digits in formattedNumberGroups[i].\n    fromIndex = normalizedCandidate.indexOf(formattedNumberGroups[i], fromIndex);\n\n    if (fromIndex < 0) {\n      return false;\n    } // Moves {@code fromIndex} forward.\n\n\n    fromIndex += formattedNumberGroups[i].length();\n\n    if (i == 0 && fromIndex < normalizedCandidate.length()) {\n      // We are at the position right after the NDC. We get the region used for formatting\n      // information based on the country code in the phone number, rather than the number itself,\n      // as we do not need to distinguish between different countries with the same country\n      // calling code and this is faster.\n      var region = util.getRegionCodeForCountryCode(number.getCountryCode());\n\n      if (util.getNddPrefixForRegion(region, true) != null && Character.isDigit(normalizedCandidate.charAt(fromIndex))) {\n        // This means there is no formatting symbol after the NDC. In this case, we only\n        // accept the number if there is no formatting symbol at all in the number, except\n        // for extensions. This is only important for countries with national prefixes.\n        var nationalSignificantNumber = util.getNationalSignificantNumber(number);\n        return startsWith(normalizedCandidate.slice(fromIndex - formattedNumberGroups[i].length), nationalSignificantNumber);\n      }\n    }\n  } // The check here makes sure that we haven't mistakenly already used the extension to\n  // match the last group of the subscriber number. Note the extension cannot have\n  // formatting in-between digits.\n\n\n  return normalizedCandidate.slice(fromIndex).contains(number.getExtension());\n}","map":{"version":3,"mappings":"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","names":["isValidNumber","parseDigits","matchPhoneNumberStringAgainstPhoneNumber","Metadata","getCountryByCallingCode","chooseFormatForNumber","startsWith","endsWith","POSSIBLE","phoneNumber","candidate","metadata","VALID","defaultCountry","isValid","containsOnlyValidXChars","STRICT_GROUPING","regExpCache","containsMoreThanOneSlashInNationalNumber","isNationalPrefixPresentIfRequired","checkNumberGroupingIsValid","allNumberGroupsRemainGrouped","EXACT_GROUPING","allNumberGroupsAreExactlyPresent","index","length","charAtIndex","charAt","charAtNextIndex","substring","ext","_metadata","__countryCallingCodeSource","selectNumberingPlan","countryCallingCode","phoneNumberRegion","country","nationalNumber","format","numberingPlan","formats","nationalPrefixFormattingRule","nationalPrefixIsOptionalWhenFormattingInNationalFormat","usesNationalPrefix","Boolean","nationalPrefix","firstSlashInBodyIndex","indexOf","secondSlashInBodyIndex","candidateHasCountryCode","slice","number","checkGroups","Error","normalizedCandidate","normalizeDigits","formattedNumberGroups","getNationalNumberGroups","alternateFormats","MetadataManager","getAlternateFormatsForCountry","getCountryCode","nationalSignificantNumber","util","getNationalSignificantNumber","numberFormats","alternateFormat","leadingDigitsPatterns","leadingDigitsRegExp","getPatternForRegExp","test","formattingPattern","formatNsnUsingPattern","split","rfc3966Format","formatNumber","endIndex","startIndex","candidateGroups","NON_DIGITS_PATTERN","candidateNumberGroupIndex","hasExtension","contains","formattedNumberGroupIndex","fromIndex","getCountryCodeSource","CountryCodeSource","FROM_DEFAULT_COUNTRY","countryCode","String","i","region","getRegionCodeForCountryCode","getNddPrefixForRegion","Character","isDigit","getExtension"],"sources":["../../source/findNumbers/Leniency.js"],"sourcesContent":["import isValidNumber from '../isValid.js'\r\nimport parseDigits from '../helpers/parseDigits.js'\r\nimport matchPhoneNumberStringAgainstPhoneNumber from './matchPhoneNumberStringAgainstPhoneNumber.js'\r\nimport Metadata from '../metadata.js'\r\nimport getCountryByCallingCode from '../helpers/getCountryByCallingCode.js'\r\nimport { chooseFormatForNumber } from '../format.js'\r\n\r\nimport {\r\n\tstartsWith,\r\n\tendsWith\r\n} from './util.js'\r\n\r\n/**\r\n * Leniency when finding potential phone numbers in text segments\r\n * The levels here are ordered in increasing strictness.\r\n */\r\nexport default\r\n{\r\n\t/**\r\n\t * Phone numbers accepted are \"possible\", but not necessarily \"valid\".\r\n\t */\r\n\tPOSSIBLE(phoneNumber, { candidate, metadata })\r\n\t{\r\n\t\treturn true\r\n\t},\r\n\r\n\t/**\r\n\t * Phone numbers accepted are \"possible\" and \"valid\".\r\n\t * Numbers written in national format must have their national-prefix\r\n\t * present if it is usually written for a number of this type.\r\n\t */\r\n\tVALID(phoneNumber, { candidate, defaultCountry, metadata })\r\n\t{\r\n\t\tif (\r\n\t\t\t!phoneNumber.isValid() ||\r\n\t\t\t!containsOnlyValidXChars(phoneNumber, candidate, metadata)\r\n\t\t)\r\n\t\t{\r\n\t\t\treturn false\r\n\t\t}\r\n\r\n\t\t// Skipped for simplicity.\r\n\t\t// return isNationalPrefixPresentIfRequired(phoneNumber, { defaultCountry, metadata })\r\n\t\treturn true\r\n\t},\r\n\r\n\t/**\r\n\t * Phone numbers accepted are \"valid\" and\r\n\t * are grouped in a possible way for this locale. For example, a US number written as\r\n\t * \"65 02 53 00 00\" and \"650253 0000\" are not accepted at this leniency level, whereas\r\n\t * \"650 253 0000\", \"650 2530000\" or \"6502530000\" are.\r\n\t * Numbers with more than one '/' symbol in the national significant number\r\n\t * are also dropped at this level.\r\n\t *\r\n\t * Warning: This level might result in lower coverage especially for regions outside of\r\n\t * country code \"+1\". If you are not sure about which level to use,\r\n\t * email the discussion group libphonenumber-discuss@googlegroups.com.\r\n\t */\r\n\tSTRICT_GROUPING(phoneNumber, { candidate, defaultCountry, metadata, regExpCache })\r\n\t{\r\n\t\tif (\r\n\t\t\t!phoneNumber.isValid() ||\r\n\t\t\t!containsOnlyValidXChars(phoneNumber, candidate, metadata) ||\r\n\t\t\tcontainsMoreThanOneSlashInNationalNumber(phoneNumber, candidate) ||\r\n\t\t\t!isNationalPrefixPresentIfRequired(phoneNumber, { defaultCountry, metadata })\r\n\t\t)\r\n\t\t{\r\n\t\t\treturn false\r\n\t\t}\r\n\r\n\t\treturn checkNumberGroupingIsValid\r\n\t\t(\r\n\t\t\tphoneNumber,\r\n\t\t\tcandidate,\r\n\t\t\tmetadata,\r\n\t\t\tallNumberGroupsRemainGrouped,\r\n\t\t\tregExpCache\r\n\t\t)\r\n\t},\r\n\r\n\t/**\r\n\t * Phone numbers accepted are \"valid\" and are grouped in the same way\r\n\t * that we would have formatted it, or as a single block.\r\n\t * For example, a US number written as \"650 2530000\" is not accepted\r\n\t * at this leniency level, whereas \"650 253 0000\" or \"6502530000\" are.\r\n\t * Numbers with more than one '/' symbol are also dropped at this level.\r\n\t *\r\n\t * Warning: This level might result in lower coverage especially for regions outside of\r\n\t * country code \"+1\". If you are not sure about which level to use, email the discussion group\r\n\t * libphonenumber-discuss@googlegroups.com.\r\n\t */\r\n\tEXACT_GROUPING(phoneNumber, { candidate, defaultCountry, metadata, regExpCache })\r\n\t{\r\n\t\tif (\r\n\t\t\t!phoneNumber.isValid() ||\r\n\t\t\t!containsOnlyValidXChars(phoneNumber, candidate, metadata) ||\r\n\t\t\tcontainsMoreThanOneSlashInNationalNumber(phoneNumber, candidate) ||\r\n\t\t\t!isNationalPrefixPresentIfRequired(phoneNumber, { defaultCountry, metadata })\r\n\t\t)\r\n\t\t{\r\n\t\t\treturn false\r\n\t\t}\r\n\r\n\t\treturn checkNumberGroupingIsValid\r\n\t\t(\r\n\t\t\tphoneNumber,\r\n\t\t\tcandidate,\r\n\t\t\tmetadata,\r\n\t\t\tallNumberGroupsAreExactlyPresent,\r\n\t\t\tregExpCache\r\n\t\t)\r\n\t}\r\n}\r\n\r\nfunction containsOnlyValidXChars(phoneNumber, candidate, metadata)\r\n{\r\n\t// The characters 'x' and 'X' can be (1) a carrier code, in which case they always precede the\r\n\t// national significant number or (2) an extension sign, in which case they always precede the\r\n\t// extension number. We assume a carrier code is more than 1 digit, so the first case has to\r\n\t// have more than 1 consecutive 'x' or 'X', whereas the second case can only have exactly 1 'x'\r\n\t// or 'X'. We ignore the character if it appears as the last character of the string.\r\n\tfor (let index = 0; index < candidate.length - 1; index++)\r\n\t{\r\n\t\tconst charAtIndex = candidate.charAt(index)\r\n\r\n\t\tif (charAtIndex === 'x' || charAtIndex === 'X')\r\n\t\t{\r\n\t\t\tconst charAtNextIndex = candidate.charAt(index + 1)\r\n\r\n\t\t\tif (charAtNextIndex === 'x' || charAtNextIndex === 'X')\r\n\t\t\t{\r\n\t\t\t\t// This is the carrier code case, in which the 'X's always precede the national\r\n\t\t\t\t// significant number.\r\n\t\t\t\tindex++\r\n\t\t\t\tif (matchPhoneNumberStringAgainstPhoneNumber(candidate.substring(index), phoneNumber, metadata) !== 'NSN_MATCH')\r\n\t\t\t\t{\r\n\t\t\t\t\treturn false\r\n\t\t\t\t}\r\n\t\t\t\t// This is the extension sign case, in which the 'x' or 'X' should always precede the\r\n\t\t\t\t// extension number.\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tconst ext = parseDigits(candidate.substring(index))\r\n\t\t\t\tif (ext) {\r\n\t\t\t\t\tif (phoneNumber.ext !== ext)  {\r\n\t\t\t\t\t\treturn false\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (phoneNumber.ext) {\r\n\t\t\t\t\t\treturn false\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn true\r\n}\r\n\r\nfunction isNationalPrefixPresentIfRequired(phoneNumber, { defaultCountry, metadata: _metadata })\r\n{\r\n\t// First, check how we deduced the country code. If it was written in international format, then\r\n\t// the national prefix is not required.\r\n\tif (phoneNumber.__countryCallingCodeSource !== 'FROM_DEFAULT_COUNTRY')\r\n\t{\r\n\t\treturn true\r\n\t}\r\n\r\n\tconst metadata = new Metadata(_metadata)\r\n\tmetadata.selectNumberingPlan(phoneNumber.countryCallingCode)\r\n\r\n\tconst phoneNumberRegion = phoneNumber.country || getCountryByCallingCode(phoneNumber.countryCallingCode, {\r\n\t\tnationalNumber: phoneNumber.nationalNumber,\r\n\t\tdefaultCountry,\r\n\t\tmetadata\r\n\t})\r\n\r\n\t// Check if a national prefix should be present when formatting this number.\r\n\tconst nationalNumber = phoneNumber.nationalNumber\r\n\tconst format = chooseFormatForNumber(metadata.numberingPlan.formats(), nationalNumber)\r\n\r\n\t// To do this, we check that a national prefix formatting rule was present\r\n\t// and that it wasn't just the first-group symbol ($1) with punctuation.\r\n\tif (format.nationalPrefixFormattingRule())\r\n\t{\r\n\t\tif (metadata.numberingPlan.nationalPrefixIsOptionalWhenFormattingInNationalFormat())\r\n\t\t{\r\n\t\t\t// The national-prefix is optional in these cases, so we don't need to check if it was present.\r\n\t\t\treturn true\r\n\t\t}\r\n\r\n\t\tif (!format.usesNationalPrefix())\r\n\t\t{\r\n\t\t\t// National Prefix not needed for this number.\r\n\t\t\treturn true\r\n\t\t}\r\n\r\n\t\treturn Boolean(phoneNumber.nationalPrefix)\r\n\t}\r\n\r\n\treturn true\r\n}\r\n\r\nexport function containsMoreThanOneSlashInNationalNumber(phoneNumber, candidate)\r\n{\r\n\tconst firstSlashInBodyIndex = candidate.indexOf('/')\r\n\tif (firstSlashInBodyIndex < 0)\r\n\t{\r\n\t\t// No slashes, this is okay.\r\n\t\treturn false\r\n\t}\r\n\r\n\t// Now look for a second one.\r\n\tconst secondSlashInBodyIndex = candidate.indexOf('/', firstSlashInBodyIndex + 1)\r\n\tif (secondSlashInBodyIndex < 0)\r\n\t{\r\n\t\t// Only one slash, this is okay.\r\n\t\treturn false\r\n\t}\r\n\r\n\t// If the first slash is after the country calling code, this is permitted.\r\n\tconst candidateHasCountryCode =\r\n\t\t\tphoneNumber.__countryCallingCodeSource === 'FROM_NUMBER_WITH_PLUS_SIGN' ||\r\n\t\t\tphoneNumber.__countryCallingCodeSource === 'FROM_NUMBER_WITHOUT_PLUS_SIGN'\r\n\r\n\tif (candidateHasCountryCode && parseDigits(candidate.substring(0, firstSlashInBodyIndex)) === phoneNumber.countryCallingCode)\r\n\t{\r\n\t\t// Any more slashes and this is illegal.\r\n\t\treturn candidate.slice(secondSlashInBodyIndex + 1).indexOf('/') >= 0\r\n\t}\r\n\r\n\treturn true\r\n}\r\n\r\nfunction checkNumberGroupingIsValid(\r\n\tnumber,\r\n\tcandidate,\r\n\tmetadata,\r\n\tcheckGroups,\r\n\tregExpCache\r\n) {\r\n\tthrow new Error('This part of code hasn\\'t been ported')\r\n\r\n\tconst normalizedCandidate = normalizeDigits(candidate, true /* keep non-digits */)\r\n\tlet formattedNumberGroups = getNationalNumberGroups(metadata, number, null)\r\n\tif (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {\r\n\t\treturn true\r\n\t}\r\n\r\n\t// If this didn't pass, see if there are any alternate formats that match, and try them instead.\r\n\tconst alternateFormats = MetadataManager.getAlternateFormatsForCountry(number.getCountryCode())\r\n\tconst nationalSignificantNumber = util.getNationalSignificantNumber(number)\r\n\r\n\tif (alternateFormats) {\r\n\t\tfor (const alternateFormat of alternateFormats.numberFormats()) {\r\n\t\t\tif (alternateFormat.leadingDigitsPatterns().length > 0) {\r\n\t\t\t\t// There is only one leading digits pattern for alternate formats.\r\n\t\t\t\tconst leadingDigitsRegExp = regExpCache.getPatternForRegExp('^' + alternateFormat.leadingDigitsPatterns()[0])\r\n\t\t\t\tif (!leadingDigitsRegExp.test(nationalSignificantNumber)) {\r\n\t\t\t\t\t// Leading digits don't match; try another one.\r\n\t\t\t\t\tcontinue\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tformattedNumberGroups = getNationalNumberGroups(metadata, number, alternateFormat)\r\n\t\t\tif (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn false\r\n}\r\n\r\n/**\r\n * Helper method to get the national-number part of a number, formatted without any national\r\n * prefix, and return it as a set of digit blocks that would be formatted together following\r\n * standard formatting rules.\r\n */\r\nfunction getNationalNumberGroups(\r\n\tmetadata,\r\n\tnumber,\r\n\tformattingPattern\r\n) {\r\n\tthrow new Error('This part of code hasn\\'t been ported')\r\n\r\n\tif (formattingPattern) {\r\n\t\t// We format the NSN only, and split that according to the separator.\r\n\t\tconst nationalSignificantNumber = util.getNationalSignificantNumber(number)\r\n\t\treturn util.formatNsnUsingPattern(nationalSignificantNumber,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tformattingPattern, 'RFC3966', metadata).split('-')\r\n\t}\r\n\r\n\t// This will be in the format +CC-DG1-DG2-DGX;ext=EXT where DG1..DGX represents groups of digits.\r\n\tconst rfc3966Format = formatNumber(number, 'RFC3966', metadata)\r\n\r\n\t// We remove the extension part from the formatted string before splitting it into different\r\n\t// groups.\r\n\tlet endIndex = rfc3966Format.indexOf(';')\r\n\tif (endIndex < 0) {\r\n\t\tendIndex = rfc3966Format.length\r\n\t}\r\n\r\n\t// The country-code will have a '-' following it.\r\n\tconst startIndex = rfc3966Format.indexOf('-') + 1\r\n\treturn rfc3966Format.slice(startIndex, endIndex).split('-')\r\n}\r\n\r\nfunction allNumberGroupsAreExactlyPresent\r\n(\r\n\tmetadata,\r\n\tnumber,\r\n\tnormalizedCandidate,\r\n\tformattedNumberGroups\r\n)\r\n{\r\n\tthrow new Error('This part of code hasn\\'t been ported')\r\n\r\n\tconst candidateGroups = normalizedCandidate.split(NON_DIGITS_PATTERN)\r\n\r\n\t// Set this to the last group, skipping it if the number has an extension.\r\n\tlet candidateNumberGroupIndex =\r\n\t\t\tnumber.hasExtension() ? candidateGroups.length - 2 : candidateGroups.length - 1\r\n\r\n\t// First we check if the national significant number is formatted as a block.\r\n\t// We use contains and not equals, since the national significant number may be present with\r\n\t// a prefix such as a national number prefix, or the country code itself.\r\n\tif (candidateGroups.length == 1\r\n\t\t\t|| candidateGroups[candidateNumberGroupIndex].contains(\r\n\t\t\t\t\tutil.getNationalSignificantNumber(number)))\r\n\t{\r\n\t\treturn true\r\n\t}\r\n\r\n\t// Starting from the end, go through in reverse, excluding the first group, and check the\r\n\t// candidate and number groups are the same.\r\n\tlet formattedNumberGroupIndex = (formattedNumberGroups.length - 1)\r\n\twhile (formattedNumberGroupIndex > 0 && candidateNumberGroupIndex >= 0)\r\n\t{\r\n\t\tif (candidateGroups[candidateNumberGroupIndex] !== formattedNumberGroups[formattedNumberGroupIndex])\r\n\t\t{\r\n\t\t\treturn false\r\n\t\t}\r\n\t\tformattedNumberGroupIndex--\r\n\t\tcandidateNumberGroupIndex--\r\n\t}\r\n\r\n\t// Now check the first group. There may be a national prefix at the start, so we only check\r\n\t// that the candidate group ends with the formatted number group.\r\n\treturn (candidateNumberGroupIndex >= 0\r\n\t\t\t&& endsWith(candidateGroups[candidateNumberGroupIndex], formattedNumberGroups[0]))\r\n}\r\n\r\n\r\nfunction allNumberGroupsRemainGrouped\r\n(\r\n\tmetadata,\r\n\tnumber,\r\n\tnormalizedCandidate,\r\n\tformattedNumberGroups\r\n)\r\n{\r\n\tthrow new Error('This part of code hasn\\'t been ported')\r\n\r\n\tlet fromIndex = 0\r\n\tif (number.getCountryCodeSource() !== CountryCodeSource.FROM_DEFAULT_COUNTRY)\r\n\t{\r\n\t\t// First skip the country code if the normalized candidate contained it.\r\n\t\tconst countryCode = String(number.getCountryCode())\r\n\t\tfromIndex = normalizedCandidate.indexOf(countryCode) + countryCode.length()\r\n\t}\r\n\r\n\t// Check each group of consecutive digits are not broken into separate groupings in the\r\n\t// {@code normalizedCandidate} string.\r\n\tfor (let i = 0; i < formattedNumberGroups.length; i++)\r\n\t{\r\n\t\t// Fails if the substring of {@code normalizedCandidate} starting from {@code fromIndex}\r\n\t\t// doesn't contain the consecutive digits in formattedNumberGroups[i].\r\n\t\tfromIndex = normalizedCandidate.indexOf(formattedNumberGroups[i], fromIndex)\r\n\t\tif (fromIndex < 0) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\t// Moves {@code fromIndex} forward.\r\n\t\tfromIndex += formattedNumberGroups[i].length()\r\n\t\tif (i == 0 && fromIndex < normalizedCandidate.length())\r\n\t\t{\r\n\t\t\t// We are at the position right after the NDC. We get the region used for formatting\r\n\t\t\t// information based on the country code in the phone number, rather than the number itself,\r\n\t\t\t// as we do not need to distinguish between different countries with the same country\r\n\t\t\t// calling code and this is faster.\r\n\t\t\tconst region = util.getRegionCodeForCountryCode(number.getCountryCode())\r\n\t\t\tif (util.getNddPrefixForRegion(region, true) != null\r\n\t\t\t\t\t&& Character.isDigit(normalizedCandidate.charAt(fromIndex))) {\r\n\t\t\t\t// This means there is no formatting symbol after the NDC. In this case, we only\r\n\t\t\t\t// accept the number if there is no formatting symbol at all in the number, except\r\n\t\t\t\t// for extensions. This is only important for countries with national prefixes.\r\n\t\t\t\tconst nationalSignificantNumber = util.getNationalSignificantNumber(number)\r\n\t\t\t\treturn startsWith\r\n\t\t\t\t(\r\n\t\t\t\t\tnormalizedCandidate.slice(fromIndex - formattedNumberGroups[i].length),\r\n\t\t\t\t\t nationalSignificantNumber\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// The check here makes sure that we haven't mistakenly already used the extension to\r\n\t// match the last group of the subscriber number. Note the extension cannot have\r\n\t// formatting in-between digits.\r\n\treturn normalizedCandidate.slice(fromIndex).contains(number.getExtension())\r\n}"]},"metadata":{},"sourceType":"module"}