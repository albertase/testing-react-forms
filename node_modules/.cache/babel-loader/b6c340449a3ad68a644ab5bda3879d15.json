{"ast":null,"code":"import countryList from './assets/country.json';\nimport { compare, findEntryByCode } from './utils'; // Get a country by isoCode.\n\nfunction getCountryByCode(isoCode) {\n  if (!isoCode) return undefined;\n  return findEntryByCode(countryList, isoCode);\n} // Get a list of all countries.\n\n\nfunction getAllCountries() {\n  return countryList;\n}\n\nfunction sortByIsoCode(countries) {\n  return countries.sort((a, b) => {\n    return compare(a, b, entity => {\n      return entity.isoCode;\n    });\n  });\n}\n\nexport default {\n  getCountryByCode,\n  getAllCountries,\n  sortByIsoCode\n};","map":{"version":3,"names":["countryList","compare","findEntryByCode","getCountryByCode","isoCode","undefined","getAllCountries","sortByIsoCode","countries","sort","a","b","entity"],"sources":["/home/albert/Desktop/albert.com/the-complete-react/react-form/node_modules/country-state-city/lib/country.js"],"sourcesContent":["import countryList from './assets/country.json';\nimport { compare, findEntryByCode } from './utils';\n// Get a country by isoCode.\nfunction getCountryByCode(isoCode) {\n    if (!isoCode)\n        return undefined;\n    return findEntryByCode(countryList, isoCode);\n}\n// Get a list of all countries.\nfunction getAllCountries() {\n    return countryList;\n}\nfunction sortByIsoCode(countries) {\n    return countries.sort((a, b) => {\n        return compare(a, b, (entity) => {\n            return entity.isoCode;\n        });\n    });\n}\nexport default {\n    getCountryByCode,\n    getAllCountries,\n    sortByIsoCode,\n};\n"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,uBAAxB;AACA,SAASC,OAAT,EAAkBC,eAAlB,QAAyC,SAAzC,C,CACA;;AACA,SAASC,gBAAT,CAA0BC,OAA1B,EAAmC;EAC/B,IAAI,CAACA,OAAL,EACI,OAAOC,SAAP;EACJ,OAAOH,eAAe,CAACF,WAAD,EAAcI,OAAd,CAAtB;AACH,C,CACD;;;AACA,SAASE,eAAT,GAA2B;EACvB,OAAON,WAAP;AACH;;AACD,SAASO,aAAT,CAAuBC,SAAvB,EAAkC;EAC9B,OAAOA,SAAS,CAACC,IAAV,CAAe,CAACC,CAAD,EAAIC,CAAJ,KAAU;IAC5B,OAAOV,OAAO,CAACS,CAAD,EAAIC,CAAJ,EAAQC,MAAD,IAAY;MAC7B,OAAOA,MAAM,CAACR,OAAd;IACH,CAFa,CAAd;EAGH,CAJM,CAAP;AAKH;;AACD,eAAe;EACXD,gBADW;EAEXG,eAFW;EAGXC;AAHW,CAAf"},"metadata":{},"sourceType":"module"}